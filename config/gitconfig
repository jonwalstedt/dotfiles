[core]
    excludesfile = ~/.gitignore_global
[user]
    email = jon.walstedt@mentimeter.com
    name = Jon Wålstedt
[commit]
    template = ~/.stCommitMsg
[credential]
    helper = osxkeychain
[pager]
    diff = diff-so-fancy | less --tabs=1,5 -R
    show = diff-so-fancy | less --tabs=1,5 -R
[pull]
    rebase = false
[push]
    default = simple
[core]
    pager = diff-so-fancy | less --tabs=4 -RFX
[color]
    ui = true
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
[alias]
    # list all aliases
    aliases = !git config --get-regexp ^alias\\. | sed -e s/^alias.// -e s/\\ /\\ $(printf \"\\043\")--\\>\\ / | column -t -s $(printf \"\\043\") | sort -k 1
    # undo last commit
    undo = reset --soft HEAD~1
    tags = log --no-walk --tags --oneline
    list-merged = ! git branch --merged master | grep --invert-match "master"
    remove-merged = ! git branch --merged master | grep --invert-match "master" | xargs -n 1 git branch -d
    list-commit = diff-tree --no-commit-id --name-only -r

    # Log aliases
    l = lg2-specific
    la = lg2
    lg1 = lg1-specific --all
    lg2 = lg2-specific --all
    lg3 = lg3-specific --all

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'


    # l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --date=relative
    # la = log --graph --pretty=format:'%Cgreen%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --all --date=relative
    # lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    # l1 = !git l1 -35
    # l2 = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)%ad(%ar)%C(red) %an%C(reset)%C(bold yellow)%d%C(reset) — %C(white)%s%C(reset) %C(bold white)' --abbrev-commit --date=iso
    # l3 = log --graph --pretty=format:'%C(bold blue)%h%C(white) - %C(bold green)%cr %C(white)- %C(bold red)%an%C(bold yellow)%d%C(white) - %s' --abbrev-commit --date=relative
    # l4 = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(bold white)— %an%C(reset)' --abbrev-commit
    # l5 = log --graph --oneline

    # Handfull shortcuts
    ck = checkout
    m = checkout master
    d = checkout develop

    # Prune aliases
    # Prune Tags - Prune local Git tags that doesn't exist on remote 'origin'
    p-tags=!git fetch --prune origin '+refs/tags/*:refs/tags/*'

    # Prune Branches remote branchs and remove the local ones that as gonne on the remote
    # See https://stackoverflow.com/a/33548037/2397394
    list-no-remote="!gitListNoRemote() { git fetch --prune && for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do echo $branch; done }; gitListNoRemote"
    p-branch="!gitPruneBranch() { git fetch --prune && for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done }; gitPruneBranch"
    remove-no-remote=!git p-branch
    # Alinas for prune all branches and tags
    p-all=!git p-branch && git p-tags
    # A shortcut for the the command 'p-all'
    pa=!git p-all

    df = !git --no-pager diff --shortstat master
    st = status -sb
    ci = commit
    co = checkout
    s = status
    b = branch
    hist = log --graph --oneline --decorate --date=relative --all
    surec = submodule update --recursive

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22
[color "diff"]
    meta = 227
    frag = magenta bold
    commit = 227 bold
    old = red bold
    new = green bold
    whitespace = red reverse
[init]
	defaultBranch = main
