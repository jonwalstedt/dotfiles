# DONT FORGET TO USE CONVETIONALCOMMITS PREFIX: fix:, feat:, BREAKING CHANGE:, etc.
# https://www.conventionalcommits.org/en/v1.0.0/
# https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#

# build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
# ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)
# docs: Documentation only changes
# feat: A new feature (this correlates with MINOR in semantic versioning)
# fix: A bug fix (this correlates with PATCH in semantic versioning)
# perf: A code change that improves performance
# refactor: A code change that neither fixes a bug nor adds a feature
# style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
# test: Adding missing tests or correcting existing tests


# BREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change (correlating with MAJOR in semantic versioning). A BREAKING CHANGE can be part of commits of any type.

# footers other than BREAKING CHANGE: <description> may be provided and follow a convention similar to git trailer format.
